// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Courrier {
//   id              Int          @id @default(autoincrement())
//   reference       String       @unique
//   type            String // ENUM('entrant', 'sortant')
//   expediteur      String
//   destinataire    String
//   sujet           String?
//   contenu         String?
//   etat            String       @default("En attente") // ENUM('En attente', 'Traité', 'Clôturé')
//   dateReception   DateTime?
//   dateEnvoi       DateTime?
//   fichierNumerise String?
//   departement     Departement? @relation(fields: [departementId], references: [id])
//   departementId   Int?
//   archived Boolean @default(false)
//   archives Archive[]
// }
//
// model Utilisateur {
//   id           Int          @id @default(autoincrement())
//   username     String
//   password     String
//   email        String       @unique
//   role         String
//   dateCreation DateTime     @default(now())
//   dateUpdate   DateTime     @updatedAt
//   creePar      Utilisateur? @relation("CreePar", fields: [creeParId], references: [id])
//   creeParId    Int?
//   updatePar    Utilisateur? @relation("UpdatePar", fields: [updateParId], references: [id])
//   updateParId  Int?
//
//   utilisateursCree   Utilisateur[] @relation("CreePar")
//   utilisateursUpdate Utilisateur[] @relation("UpdatePar")
//   departements       Departement[] @relation("Responsable")
// }
//
// model Departement {
//   id            Int          @id @default(autoincrement())
//   nom           String
//   description   String?
//   responsable   Utilisateur? @relation("Responsable", fields: [responsableId], references: [id])
//   responsableId Int?
//
//   courriers Courrier[]
// }
//
// model Archive {
//   id              Int      @id @default(autoincrement())
//   courrierId      Int
//   fichierNumerise String
//   categorie       String?
//   dateArchivage   DateTime @default(now())
//
//   courrier Courrier @relation(fields: [courrierId], references: [id], onDelete: Cascade)
// }
//
// model Rapport {
//   id             Int      @id @default(autoincrement())
//   type           String // ENUM('Mensuel', 'Annuel')
//   dateGeneration DateTime @default(now())
//   donnees        Json
//   format         String // ENUM('PDF', 'Excel')
// }

model Courrier {
  id               Int          @id @default(autoincrement())
  reference        String       @unique
  type             String // ENUM('entrant', 'sortant')
  expediteur       String
  destinataire     String
  sujet            String?
  contenu          String?
  etat             String       @default("En attente") // ENUM('En attente', 'Traité', 'Clôturé')
  date_reception   DateTime?
  date_envoi       DateTime?
  fichier_numerise String?
  departement      Departement? @relation(fields: [departement_id], references: [id])
  departement_id   Int?

  archives Archive[]
}

model Utilisateur {
  id            Int          @id @default(autoincrement())
  username      String
  password      String
  email         String       @unique
  role          String
  date_creation DateTime     @default(now())
  date_update   DateTime     @updatedAt
  cree_par      Utilisateur? @relation("CreePar", fields: [cree_par_id], references: [id])
  cree_par_id   Int?
  update_par    Utilisateur? @relation("UpdatePar", fields: [update_par_id], references: [id])
  update_par_id Int?

  utilisateurs_cree   Utilisateur[] @relation("CreePar")
  utilisateurs_update Utilisateur[] @relation("UpdatePar")
  departements        Departement[] @relation("Responsable")
}

model Departement {
  id             Int          @id @default(autoincrement())
  nom            String
  description    String?
  responsable    Utilisateur? @relation("Responsable", fields: [responsable_id], references: [id])
  responsable_id Int?

  courriers Courrier[]
}

model Archive {
  id               Int      @id @default(autoincrement())
  courrier_id      Int
  fichier_numerise String
  categorie        String?
  date_archivage   DateTime @default(now())

  courrier Courrier @relation(fields: [courrier_id], references: [id], onDelete: Cascade)
}

model Rapport {
  id              Int      @id @default(autoincrement())
  type            String // ENUM('Mensuel', 'Annuel')
  date_generation DateTime @default(now())
  donnees         Json
  format          String // ENUM('PDF', 'Excel')
}
